# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

APP_STORE_CONNECT_TEAM_ID =       ENV["APP_STORE_CONNECT_TEAM_ID"]      # the team ID of your App Store Connect account
APPLE_ISSUER_ID =                 ENV["APPLE_ISSUER_ID"]                # App Store Connect API Key ðŸ”ºIssuer ID
APPLE_KEY_CONTENT =               ENV["APPLE_KEY_CONTENT"]              # App Store Connect API Key ðŸ”º Key file or Key content of .p8, check it out here: https://github.com/fastlane/fastlane/issues/18655#issuecomment-881764901
APPLE_KEY_ID =                    ENV["APPLE_KEY_ID"]                   # App Store Connect API Key ðŸ”ºKey ID
DEVELOPER_APP_ID =                ENV["DEVELOPER_APP_ID"]               # in App Store Connect, go to the app -> App Information -> Scroll down to the General Information section of your app and look for Apple ID.
DEVELOPER_APP_IDENTIFIER =        ENV["DEVELOPER_APP_IDENTIFIER"]       # your appâ€™s bundle identifier
DEVELOPER_PORTAL_TEAM_ID =        ENV["DEVELOPER_PORTAL_TEAM_ID"]       # the ID of your Developer Portal team if youâ€™re in multiple teams
FASTLANE_APPLE_ID =               ENV["FASTLANE_APPLE_ID"]              # your Apple ID username (usually your email address)
GIT_AUTHORIZATION =               ENV["GIT_AUTHORIZATION"]              # <YOUR_GITUSERNAME>:<YOUR_PERSONAL_ACCESS_TOKEN>, eg. joshuadeguzman:mysecretkeyyoudontwanttoknow
MATCH_PASSWORD =                  ENV["MATCH_PASSWORD"]                 # the passphrase that you assigned when initializing match, will be used for decrypting the certificates and provisioning profiles
PROVISIONING_PROFILE_SPECIFIER =  ENV["PROVISIONING_PROFILE_SPECIFIER"] # match AppStore <YOUR_APP_BUNDLE_IDENTIFIER>, eg. match AppStore com.domain.blabla.demo.
TEMP_KEYCHAIN_PASSWORD =          ENV["TEMP_KEYCHAIN_PASSWORD"]         # the password of the temporary keychain
TEMP_KEYCHAIN_USER =              ENV["TEMP_KEYCHAIN_USER"]             # the name of the temporary keychain
TARGET =                          "TemplateApp"                         # the name of your target

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    default_keychain: true,
    unlock: true,
    timeout: 3600,
    lock_when_sleeps: false
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

def disable_auto_code_signing(profile)
  update_code_signing_settings(
      use_automatic_signing: false,
      team_id: DEVELOPER_PORTAL_TEAM_ID,
      targets: ["TemplateApp"],
      build_configurations: ["Release"],
      code_sign_identity: "iPhone Distribution",
      profile_name: profile
    )
end

# Function that return APY Key
def get_api_key
  api_key = app_store_connect_api_key(
    key_id: APPLE_KEY_ID,
    issuer_id: APPLE_ISSUER_ID,
    key_content: APPLE_KEY_CONTENT,          
    is_key_content_base64: true,  
    duration: 1200,
  )
  return api_key
end

platform :ios do
  desc "Print a system name: CI or Local"
  lane :print_system_name do
    puts "System name: #{is_ci ? 'CI' : 'Local'}"
  end

  desc "Print 'Hello World'"
  lane :tests do
    run_tests(scheme: "TemplateAppTests")
  end

  desc "Setup keychain"
  lane :setup_keychain do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)
  end
  
  desc "Fetch certificates and provisioning profiles"
  lane :fetch_certificates do
    match(
      type: 'appstore',
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      readonly: true,
      keychain_name: TEMP_KEYCHAIN_USER,
      keychain_password: TEMP_KEYCHAIN_PASSWORD,
      api_key: get_api_key
    )
  end

  desc "Fetch develop certificates and provisioning profiles"
  lane :fetch_develop_certificates do
    match(
      type: 'development',
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      readonly: true,
      keychain_name: TEMP_KEYCHAIN_USER,
      keychain_password: TEMP_KEYCHAIN_PASSWORD,
      api_key: get_api_key
    )
  end

  desc "Update Code Signing Settings"
  lane :update_signin_settings do
    # Profile name that 'match' fetched or created
    profile = ENV["sigh_#{DEVELOPER_APP_IDENTIFIER}_appstore_profile-name"]

    update_code_signing_settings(
      use_automatic_signing: false,
      team_id: DEVELOPER_PORTAL_TEAM_ID,
      targets: [TARGET],
      build_configurations: ["Release"],
      bundle_identifier: DEVELOPER_APP_IDENTIFIER,
      code_sign_identity: "iPhone Distribution",
      sdk: "iphoneos*",
      profile_name: profile
    )
  end 

  lane :update_build_number do 
    increment_build_number({
      build_number: latest_testflight_build_number + 1
    })
  end 

  lane :build do
    profile = ENV["sigh_#{DEVELOPER_APP_IDENTIFIER}_appstore_profile-name"]

    build_app(
      scheme: "TemplateApp",
      export_method: "app-store",
      clean: true,
      export_options: {
        provisioningProfiles: { 
            DEVELOPER_APP_ID => profile
        }
      }
    )
  end

  lane :upload do 
    upload_to_app_store(
      precheck_include_in_app_purchases: false
    )
  end 

  desc "Push a new build to AppStore"
  lane :release do |options|
    if is_ci
      setup_keychain
      fetch_certificates
      update_signin_settings
    end

    tests
    update_build_number
    build
    
    if options[:capture_screenshots]
      capture_ios_screenshots
    end

    upload
  end

  desc "Take screenshots and upload to AppStore"
  lane :release_with_screenshots do
    release capture_screenshots: true
  end

end
